{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport Chart from 'chart.js/auto';\nexport default {\n  name: \"EmployeeDashboard\",\n  data() {\n    return {\n      employees: [],\n      loading: true,\n      error: null,\n      deptBar: null,\n      salaryBar: null,\n      historyBar: null\n    };\n  },\n  mounted() {\n    fetch(\"https://zakariad007.github.io/employee/employee_info.json\").then(res => res.json()).then(data => {\n      this.employees = data.employeeInformation;\n      this.loading = false;\n      this.$nextTick(() => {\n        this.renderCharts();\n      });\n    }).catch(() => {\n      this.error = \"Failed to load employee data.\";\n      this.loading = false;\n    });\n  },\n  methods: {\n    renderCharts() {\n      // Destroy previous charts if they exist\n      if (this.deptBar) {\n        this.deptBar.destroy();\n        this.deptBar = null;\n      }\n      if (this.salaryBar) {\n        this.salaryBar.destroy();\n        this.salaryBar = null;\n      }\n      if (this.historyBar) {\n        this.historyBar.destroy();\n        this.historyBar = null;\n      }\n\n      // Employees per Department\n      const deptCounts = {};\n      this.employees.forEach(emp => {\n        if (emp.department) {\n          deptCounts[emp.department] = (deptCounts[emp.department] || 0) + 1;\n        }\n      });\n      const deptCtx = this.$refs.deptBar;\n      if (deptCtx) {\n        this.deptBar = new Chart(deptCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(deptCounts),\n            datasets: [{\n              label: 'Employees',\n              data: Object.values(deptCounts),\n              backgroundColor: '#60a5fa'\n            }]\n          },\n          options: {\n            plugins: {\n              title: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                precision: 0\n              }\n            }\n          }\n        });\n      }\n\n      // Salary Range Distribution\n      const salaryRanges = {\n        '50k-59k': 0,\n        '60k-69k': 0,\n        '70k-79k': 0,\n        '80k+': 0\n      };\n      this.employees.forEach(emp => {\n        if (emp.salary < 60000) salaryRanges['50k-59k']++;else if (emp.salary < 70000) salaryRanges['60k-69k']++;else if (emp.salary < 80000) salaryRanges['70k-79k']++;else salaryRanges['80k+']++;\n      });\n      const salaryCtx = this.$refs.salaryBar;\n      if (salaryCtx) {\n        this.salaryBar = new Chart(salaryCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(salaryRanges),\n            datasets: [{\n              label: 'Employees',\n              data: Object.values(salaryRanges),\n              backgroundColor: '#34d399'\n            }]\n          },\n          options: {\n            plugins: {\n              title: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                precision: 0\n              }\n            }\n          }\n        });\n      }\n\n      // Employment History (Year Joined)\n      const yearCounts = {};\n      this.employees.forEach(emp => {\n        // Extract year from employmentHistory string (e.g., \"Joined in 2015, promoted to Senior in 2018\")\n        const match = emp.employmentHistory.match(/Joined in (\\d{4})/);\n        if (match) {\n          const year = match[1];\n          yearCounts[year] = (yearCounts[year] || 0) + 1;\n        }\n      });\n      const historyCtx = this.$refs.historyBar;\n      if (historyCtx) {\n        this.historyBar = new Chart(historyCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(yearCounts),\n            datasets: [{\n              label: 'Employees Joined',\n              data: Object.values(yearCounts),\n              backgroundColor: '#f59e42'\n            }]\n          },\n          options: {\n            plugins: {\n              title: {\n                display: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                precision: 0\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","employees","loading","error","deptBar","salaryBar","historyBar","mounted","fetch","then","res","json","employeeInformation","$nextTick","renderCharts","catch","methods","destroy","deptCounts","forEach","emp","department","deptCtx","$refs","type","labels","Object","keys","datasets","label","values","backgroundColor","options","plugins","title","display","scales","y","beginAtZero","precision","salaryRanges","salary","salaryCtx","yearCounts","match","employmentHistory","year","historyCtx"],"sources":["C:\\Users\\Student\\Documents\\Exercises\\Workshop\\Vue\\hr_system\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\n  <div class=\"py-8\" style=\"margin-left:30px;\">\n    <h1 class=\"text-2xl font-semibold text-gray-900 text-left\">Good afternoon, Tom</h1>\n    <div class=\"p-8\">\n      <h1 class=\"text-2xl font-semibold text-gray-900 mb-6\">Employee Analytics</h1>\n\n      <!-- Graphs Section -->\n      <div v-if=\"!loading && employees.length\" class=\"mb-8 grid grid-cols-1 md:grid-cols-3 gap-8\">\n        <!-- Employees per Department -->\n        <div>\n          <h2 class=\"text-lg font-medium mb-2\">Employees per Department</h2>\n          <canvas ref=\"deptBar\"></canvas>\n        </div>\n        <!-- Salary Range Distribution -->\n        <div>\n          <h2 class=\"text-lg font-medium mb-2\">Salary Range Distribution</h2>\n          <canvas ref=\"salaryBar\"></canvas>\n        </div>\n        <!-- Employment History (Year Joined) -->\n        <div>\n          <h2 class=\"text-lg font-medium mb-2\">Employees Joined Per Year</h2>\n          <canvas ref=\"historyBar\"></canvas>\n        </div>\n      </div>\n      <div v-if=\"loading\" class=\"text-gray-500\">Loading...</div>\n      <div v-if=\"error\" class=\"text-red-500 mt-4\">{{ error }}</div>\n      <div v-if=\"!loading && !employees.length\" class=\"text-gray-500\">No data to display.</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: \"EmployeeDashboard\",\n  data() {\n    return {\n      employees: [],\n      loading: true,\n      error: null,\n      deptBar: null,\n      salaryBar: null,\n      historyBar: null\n    };\n  },\n  mounted() {\n    fetch(\"https://zakariad007.github.io/employee/employee_info.json\")\n      .then(res => res.json())\n      .then(data => {\n        this.employees = data.employeeInformation;\n        this.loading = false;\n        this.$nextTick(() => {\n          this.renderCharts();\n        });\n      })\n      .catch(() => {\n        this.error = \"Failed to load employee data.\";\n        this.loading = false;\n      });\n  },\n  methods: {\n    renderCharts() {\n      // Destroy previous charts if they exist\n      if (this.deptBar) { this.deptBar.destroy(); this.deptBar = null; }\n      if (this.salaryBar) { this.salaryBar.destroy(); this.salaryBar = null; }\n      if (this.historyBar) { this.historyBar.destroy(); this.historyBar = null; }\n\n      // Employees per Department\n      const deptCounts = {};\n      this.employees.forEach(emp => {\n        if (emp.department) {\n          deptCounts[emp.department] = (deptCounts[emp.department] || 0) + 1;\n        }\n      });\n      const deptCtx = this.$refs.deptBar;\n      if (deptCtx) {\n        this.deptBar = new Chart(deptCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(deptCounts),\n            datasets: [{\n              label: 'Employees',\n              data: Object.values(deptCounts),\n              backgroundColor: '#60a5fa'\n            }]\n          },\n          options: {\n            plugins: {\n              title: { display: false }\n            },\n            scales: {\n              y: { beginAtZero: true, precision: 0 }\n            }\n          }\n        });\n      }\n\n      // Salary Range Distribution\n      const salaryRanges = {\n        '50k-59k': 0,\n        '60k-69k': 0,\n        '70k-79k': 0,\n        '80k+': 0\n      };\n      this.employees.forEach(emp => {\n        if (emp.salary < 60000) salaryRanges['50k-59k']++;\n        else if (emp.salary < 70000) salaryRanges['60k-69k']++;\n        else if (emp.salary < 80000) salaryRanges['70k-79k']++;\n        else salaryRanges['80k+']++;\n      });\n      const salaryCtx = this.$refs.salaryBar;\n      if (salaryCtx) {\n        this.salaryBar = new Chart(salaryCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(salaryRanges),\n            datasets: [{\n              label: 'Employees',\n              data: Object.values(salaryRanges),\n              backgroundColor: '#34d399'\n            }]\n          },\n          options: {\n            plugins: {\n              title: { display: false }\n            },\n            scales: {\n              y: { beginAtZero: true, precision: 0 }\n            }\n          }\n        });\n      }\n\n      // Employment History (Year Joined)\n      const yearCounts = {};\n      this.employees.forEach(emp => {\n        // Extract year from employmentHistory string (e.g., \"Joined in 2015, promoted to Senior in 2018\")\n        const match = emp.employmentHistory.match(/Joined in (\\d{4})/);\n        if (match) {\n          const year = match[1];\n          yearCounts[year] = (yearCounts[year] || 0) + 1;\n        }\n      });\n      const historyCtx = this.$refs.historyBar;\n      if (historyCtx) {\n        this.historyBar = new Chart(historyCtx, {\n          type: 'bar',\n          data: {\n            labels: Object.keys(yearCounts),\n            datasets: [{\n              label: 'Employees Joined',\n              data: Object.values(yearCounts),\n              backgroundColor: '#f59e42'\n            }]\n          },\n          options: {\n            plugins: {\n              title: { display: false }\n            },\n            scales: {\n              y: { beginAtZero: true, precision: 0 }\n            }\n          }\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\ncanvas {\n  max-width: 100%;\n  height: 300px !important;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}