{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"PerformanceReviews\",\n  data() {\n    return {\n      employeeInformation: [{\n        employeeId: 1,\n        name: \"Sibongile Nkosi\",\n        performanceScore: 78\n      }, {\n        employeeId: 2,\n        name: \"Lungile Moyo\",\n        performanceScore: 85\n      }, {\n        employeeId: 3,\n        name: \"Thabo Molefe\",\n        performanceScore: 64\n      }, {\n        employeeId: 4,\n        name: \"Keshav Naidoo\",\n        performanceScore: 92\n      }, {\n        employeeId: 5,\n        name: \"Zanele Khumalo\",\n        performanceScore: 74\n      }, {\n        employeeId: 6,\n        name: \"Sipho Zulu\",\n        performanceScore: 88\n      }, {\n        employeeId: 7,\n        name: \"Naledi Moeketsi\",\n        performanceScore: 90\n      }, {\n        employeeId: 8,\n        name: \"Farai Gumbo\",\n        performanceScore: 80\n      }, {\n        employeeId: 9,\n        name: \"Karabo Dlamini\",\n        performanceScore: 55\n      }, {\n        employeeId: 10,\n        name: \"Fatima Patel\",\n        performanceScore: 70\n      }],\n      animatedWidths: [],\n      // all start at 0\n      observer: null,\n      animationTriggered: false\n    };\n  },\n  mounted() {\n    this.animatedWidths = this.employeeInformation.map(() => 0);\n    this.observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !this.animationTriggered) {\n          this.animationTriggered = true;\n          this.fillBars();\n          this.observer.disconnect();\n        }\n      });\n    }, {\n      root: null,\n      threshold: 0.1\n    });\n    this.observer.observe(this.$refs.tableContainer);\n  },\n  methods: {\n    fillBars() {\n      this.animatedWidths = this.employeeInformation.map(emp => emp.performanceScore);\n    }\n  },\n  beforeDestroy() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["name","data","employeeInformation","employeeId","performanceScore","animatedWidths","observer","animationTriggered","mounted","map","IntersectionObserver","entries","forEach","entry","isIntersecting","fillBars","disconnect","root","threshold","observe","$refs","tableContainer","methods","emp","beforeDestroy"],"sources":["C:\\Users\\DELL\\Documents\\Exercises\\hr_system\\src\\views\\PerformanceReviewView.vue"],"sourcesContent":["<template>\r\n  <div class=\"p-8\">\r\n    <div class=\"text-center mb-8\">\r\n      <h1 class=\"text-3xl font-semibold\">Performance Reviews</h1>\r\n    </div>\r\n\r\n    <div\r\n      ref=\"tableContainer\"\r\n      class=\"overflow-x-auto mx-auto max-w-6xl\"\r\n    >\r\n      <table class=\"w-full table-fixed border-collapse bg-white shadow-md rounded-lg\">\r\n        <thead class=\"bg-teal-500 text-white\">\r\n          <tr>\r\n            <th class=\"w-1/12 px-4 py-3 text-left\">#</th>\r\n            <th class=\"w-3/12 px-4 py-3 text-left\">Employee Name</th>\r\n            <th class=\"w-2/12 px-2 py-3 text-center\">Performance Score</th>\r\n            <th class=\"w-6/12 px-6 py-3 pl-20 text-center\">Performance Bar</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            v-for=\"(employee, index) in employeeInformation\"\r\n            :key=\"employee.employeeId\"\r\n            class=\"border-b hover:bg-gray-100\"\r\n          >\r\n            <td class=\"px-4 py-4 text-left\">{{ index + 1 }}</td>\r\n            <td class=\"px-4 py-4 text-left\">{{ employee.name }}</td>\r\n            <td class=\"px-2 py-4 text-center\">{{ employee.performanceScore }}%</td>\r\n            <td class=\"px-6 py-4\">\r\n              <div class=\"w-1/2 bg-gray-300 rounded-full h-2 overflow-hidden ml-40\">\r\n                <div\r\n                  class=\"h-2 rounded-full bg-[#f08331] transition-width duration-2000 ease-out\"\r\n                  :style=\"{ width: animatedWidths[index] + '%' }\"\r\n                ></div>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"PerformanceReviews\",\r\n  data() {\r\n    return {\r\n      employeeInformation: [\r\n        { employeeId: 1, name: \"Sibongile Nkosi\", performanceScore: 78 },\r\n        { employeeId: 2, name: \"Lungile Moyo\", performanceScore: 85 },\r\n        { employeeId: 3, name: \"Thabo Molefe\", performanceScore: 64 },\r\n        { employeeId: 4, name: \"Keshav Naidoo\", performanceScore: 92 },\r\n        { employeeId: 5, name: \"Zanele Khumalo\", performanceScore: 74 },\r\n        { employeeId: 6, name: \"Sipho Zulu\", performanceScore: 88 },\r\n        { employeeId: 7, name: \"Naledi Moeketsi\", performanceScore: 90 },\r\n        { employeeId: 8, name: \"Farai Gumbo\", performanceScore: 80 },\r\n        { employeeId: 9, name: \"Karabo Dlamini\", performanceScore: 55 },\r\n        { employeeId: 10, name: \"Fatima Patel\", performanceScore: 70 },\r\n      ],\r\n      animatedWidths: [], // all start at 0\r\n      observer: null,\r\n      animationTriggered: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.animatedWidths = this.employeeInformation.map(() => 0);\r\n\r\n    this.observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.animationTriggered) {\r\n            this.animationTriggered = true;\r\n            this.fillBars();\r\n            this.observer.disconnect();\r\n          }\r\n        });\r\n      },\r\n      {\r\n        root: null,\r\n        threshold: 0.1,\r\n      }\r\n    );\r\n\r\n    this.observer.observe(this.$refs.tableContainer);\r\n  },\r\n  methods: {\r\n    fillBars() {\r\n      this.animatedWidths = this.employeeInformation.map(emp => emp.performanceScore);\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.observer) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.transition-width {\r\n  transition-property: width;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;;AA4CA,eAAe;EACbA,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,mBAAmB,EAAE,CACnB;QAAEC,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,iBAAiB;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAChE;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,cAAc;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC7D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,cAAc;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC7D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,eAAe;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC9D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,gBAAgB;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC/D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,YAAY;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC3D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,iBAAiB;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAChE;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,aAAa;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC5D;QAAED,UAAU,EAAE,CAAC;QAAEH,IAAI,EAAE,gBAAgB;QAAEI,gBAAgB,EAAE;MAAG,CAAC,EAC/D;QAAED,UAAU,EAAE,EAAE;QAAEH,IAAI,EAAE,cAAc;QAAEI,gBAAgB,EAAE;MAAG,CAAC,CAC/D;MACDC,cAAc,EAAE,EAAE;MAAE;MACpBC,QAAQ,EAAE,IAAI;MACdC,kBAAkB,EAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACH,cAAa,GAAI,IAAI,CAACH,mBAAmB,CAACO,GAAG,CAAC,MAAM,CAAC,CAAC;IAE3D,IAAI,CAACH,QAAO,GAAI,IAAII,oBAAoB,CACrCC,OAAO,IAAK;MACXA,OAAO,CAACC,OAAO,CAACC,KAAI,IAAK;QACvB,IAAIA,KAAK,CAACC,cAAa,IAAK,CAAC,IAAI,CAACP,kBAAkB,EAAE;UACpD,IAAI,CAACA,kBAAiB,GAAI,IAAI;UAC9B,IAAI,CAACQ,QAAQ,CAAC,CAAC;UACf,IAAI,CAACT,QAAQ,CAACU,UAAU,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MACEC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE;IACb,CACF,CAAC;IAED,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAAC,IAAI,CAACC,KAAK,CAACC,cAAc,CAAC;EAClD,CAAC;EACDC,OAAO,EAAE;IACPP,QAAQA,CAAA,EAAG;MACT,IAAI,CAACV,cAAa,GAAI,IAAI,CAACH,mBAAmB,CAACO,GAAG,CAACc,GAAE,IAAKA,GAAG,CAACnB,gBAAgB,CAAC;IACjF;EACF,CAAC;EACDoB,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAClB,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACU,UAAU,CAAC,CAAC;IAC5B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}