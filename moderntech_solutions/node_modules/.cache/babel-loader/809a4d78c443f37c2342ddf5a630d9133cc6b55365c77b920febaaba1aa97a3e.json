{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// Importing Chart.js\nimport { Chart } from 'chart.js';\nexport default {\n  name: 'PerformanceReviews',\n  data() {\n    return {\n      employeeInformation: [] // Array to store employee data from the API\n    };\n  },\n  mounted() {\n    // Fetch employee data from the provided URL\n    fetch('https://zakariad007.github.io/employee/employee_info.json').then(response => response.json()).then(data => {\n      // Log the fetched data to inspect its structure\n      console.log('Fetched employee data:', data);\n\n      // Check if the data is in the correct format\n      if (data && Array.isArray(data.employeeInformation)) {\n        // Add dummy performance scores to each employee\n        this.employeeInformation = data.employeeInformation.map(employee => ({\n          ...employee,\n          performanceScore: this.getRandomPerformanceScore()\n        }));\n\n        // Render the performance chart (optional)\n        this.renderPerformanceChart();\n      } else {\n        console.error('The data is not in the expected format:', data);\n      }\n    }).catch(error => {\n      console.error('Error fetching employee data:', error);\n    });\n  },\n  methods: {\n    // Method to generate a random performance score between 1 and 100\n    getRandomPerformanceScore() {\n      return Math.floor(Math.random() * 100) + 1;\n    },\n    // Method to render the performance chart (optional)\n    renderPerformanceChart() {\n      const ctx = document.getElementById('performanceChart').getContext('2d');\n\n      // Chart.js Bar Chart configuration\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: this.employeeInformation.map(employee => employee.name),\n          datasets: [{\n            label: 'Performance Score',\n            data: this.employeeInformation.map(employee => employee.performanceScore),\n            backgroundColor: '#39BBC8',\n            borderColor: '#2a9eab',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","employeeInformation","mounted","fetch","then","response","json","console","log","Array","isArray","map","employee","performanceScore","getRandomPerformanceScore","renderPerformanceChart","error","catch","methods","Math","floor","random","ctx","document","getElementById","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","x","beginAtZero","y","max"],"sources":["C:\\Users\\Student\\Documents\\Exercises\\Workshop\\Vue\\hr_system\\src\\views\\PerformanceReviewView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Page Heading -->\r\n    <div class=\"performance-reviews-header\">\r\n      <h1>Performance Reviews</h1>\r\n    </div>\r\n\r\n    <!-- Table to display employee names, performance data, and performance bars -->\r\n    <div class=\"performance-reviews-table\">\r\n      <table class=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Employee Name</th>\r\n            <th scope=\"col\">Performance Score</th>\r\n            <th scope=\"col\">Performance Bar</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- Loop through employeeInformation to display each name, score, and progress bar -->\r\n          <tr v-for=\"(employee, index) in employeeInformation\" :key=\"employee.employeeId\">\r\n            <td>{{ index + 1 }}</td>\r\n            <td>{{ employee.name }}</td>\r\n            <td>{{ employee.performanceScore }}%</td>\r\n            <td>\r\n              <!-- Bootstrap progress bar -->\r\n              <div class=\"progress\">\r\n                <div\r\n                  class=\"progress-bar\"\r\n                  role=\"progressbar\"\r\n                  :style=\"{ width: employee.performanceScore + '%' }\"\r\n                  :aria-valuenow=\"employee.performanceScore\"\r\n                  aria-valuemin=\"0\"\r\n                  aria-valuemax=\"100\"\r\n                ></div>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- Performance Chart (optional, you can remove this if you don't need it) -->\r\n    <div class=\"performance-graph\">\r\n      <canvas id=\"performanceChart\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Importing Chart.js\r\nimport { Chart } from 'chart.js';\r\n\r\nexport default {\r\n  name: 'PerformanceReviews',\r\n  data() {\r\n    return {\r\n      employeeInformation: [],  // Array to store employee data from the API\r\n    };\r\n  },\r\n  mounted() {\r\n    // Fetch employee data from the provided URL\r\n    fetch('https://zakariad007.github.io/employee/employee_info.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Log the fetched data to inspect its structure\r\n        console.log('Fetched employee data:', data);\r\n\r\n        // Check if the data is in the correct format\r\n        if (data && Array.isArray(data.employeeInformation)) {\r\n          // Add dummy performance scores to each employee\r\n          this.employeeInformation = data.employeeInformation.map(employee => ({\r\n            ...employee,\r\n            performanceScore: this.getRandomPerformanceScore(),\r\n          }));\r\n\r\n          // Render the performance chart (optional)\r\n          this.renderPerformanceChart();\r\n        } else {\r\n          console.error('The data is not in the expected format:', data);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching employee data:', error);\r\n      });\r\n  },\r\n  methods: {\r\n    // Method to generate a random performance score between 1 and 100\r\n    getRandomPerformanceScore() {\r\n      return Math.floor(Math.random() * 100) + 1;\r\n    },\r\n\r\n    // Method to render the performance chart (optional)\r\n    renderPerformanceChart() {\r\n      const ctx = document.getElementById('performanceChart').getContext('2d');\r\n      \r\n      // Chart.js Bar Chart configuration\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: this.employeeInformation.map(employee => employee.name),\r\n          datasets: [{\r\n            label: 'Performance Score',\r\n            data: this.employeeInformation.map(employee => employee.performanceScore),\r\n            backgroundColor: '#39BBC8',\r\n            borderColor: '#2a9eab',\r\n            borderWidth: 1,\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.performance-reviews-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.performance-reviews-table {\r\n  margin: 0 auto;\r\n  width: 80%;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\ntable th, table td {\r\n  padding: 12px;\r\n  text-align: center;\r\n}\r\n\r\ntable th {\r\n  background-color: #39BBC8;\r\n  color: white;\r\n}\r\n\r\ntable tbody tr:nth-child(even) {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\ntable tbody tr:hover {\r\n  background-color: #d1f7f7;\r\n}\r\n\r\n.performance-graph {\r\n  width: 80%;\r\n  margin: 30px auto;\r\n}\r\n\r\n/* Bootstrap Progress Bar Custom Styling */\r\n.progress {\r\n  height: 25px;\r\n}\r\n\r\n.progress-bar {\r\n  background-color: #39BBC8;\r\n}\r\n</style>\r\n"],"mappings":";;AAkDA;AACA,SAASA,KAAI,QAAS,UAAU;AAEhC,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,mBAAmB,EAAE,EAAE,CAAG;IAC5B,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACAC,KAAK,CAAC,2DAA2D,EAC9DC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACJ,IAAG,IAAK;MACZ;MACAO,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAER,IAAI,CAAC;;MAE3C;MACA,IAAIA,IAAG,IAAKS,KAAK,CAACC,OAAO,CAACV,IAAI,CAACC,mBAAmB,CAAC,EAAE;QACnD;QACA,IAAI,CAACA,mBAAkB,GAAID,IAAI,CAACC,mBAAmB,CAACU,GAAG,CAACC,QAAO,KAAM;UACnE,GAAGA,QAAQ;UACXC,gBAAgB,EAAE,IAAI,CAACC,yBAAyB,CAAC;QACnD,CAAC,CAAC,CAAC;;QAEH;QACA,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAC/B,OAAO;QACLR,OAAO,CAACS,KAAK,CAAC,yCAAyC,EAAEhB,IAAI,CAAC;MAChE;IACF,CAAC,EACAiB,KAAK,CAACD,KAAI,IAAK;MACdT,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACN,CAAC;EACDE,OAAO,EAAE;IACP;IACAJ,yBAAyBA,CAAA,EAAG;MAC1B,OAAOK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAC5C,CAAC;IAED;IACAN,sBAAsBA,CAAA,EAAG;MACvB,MAAMO,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;;MAExE;MACA,IAAI3B,KAAK,CAACwB,GAAG,EAAE;QACbI,IAAI,EAAE,KAAK;QACX1B,IAAI,EAAE;UACJ2B,MAAM,EAAE,IAAI,CAAC1B,mBAAmB,CAACU,GAAG,CAACC,QAAO,IAAKA,QAAQ,CAACb,IAAI,CAAC;UAC/D6B,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,mBAAmB;YAC1B7B,IAAI,EAAE,IAAI,CAACC,mBAAmB,CAACU,GAAG,CAACC,QAAO,IAAKA,QAAQ,CAACC,gBAAgB,CAAC;YACzEiB,eAAe,EAAE,SAAS;YAC1BC,WAAW,EAAE,SAAS;YACtBC,WAAW,EAAE;UACf,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf,CAAC;YACDC,CAAC,EAAE;cACDD,WAAW,EAAE,IAAI;cACjBE,GAAG,EAAE;YACP;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}